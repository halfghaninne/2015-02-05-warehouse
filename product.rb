require 'pry'
require 'sqlite3'

DATABASE = SQLite3::Database.new("warehouse_mgr.db")

# Class: Product
#
# Creates new product objects/records for products table in warehouse_mgr database
# 
# Attributes:
# + @id              - Integer: Primary key ##user shouldn't overwrite##
# + @serial_number   - String: 
# + @name            - String:
# + @description     - String:
# + @quantity        - Integer:
# + @cost            - Integer: ##CONSIDER CHANGING TO FLOAT/OTHER VALUE##
# + @location_id     - Integer: Foreign key ##RESTRICT VALUES##
# + @category_id     - Integer: Foreign key ##RESTRICT VALUES##
#
# Public Methods:
# ???
#
# Private Methods:
# + insert

class Product
  
  attr_reader :id
  attr_accessor :location_id, :cost, :quantity
  
  # Public or Private?: .initialize
  # Gathers arguments (field values) in an options Hash; automatically inserts them into the products table via private method .insert
  #
  # Parameters:
  # + options = {serial_number: Integer, name: String, description: String,     quantity: Integer, cost: Integer, location_id: Integer, category_id: Integer} ##Should we include id? User should never input##
  #
  # Returns: 
  # ???
  # 
  # State Changed:
  # ???
  
  def initialize(options)
    @serial_number = options[:serial_number].to_i
    @name = options[:name]
    @description = options[:description]
    @quantity = options[:quantity].to_i
    @cost = options[:cost].to_i
    @location_id = options[:location_id].to_i
    @category_id = options[:category_id].to_i
    insert
  end
  
  private
  
  # Private: .insert
  # Syntax to enter the Ruby object's arguments as a records' field values via sqlite3
  #
  # Parameters:
  #
  # Returns: 
  # Integer - @id, "id" field value, generated by table upon creation and pulled from the record
  # 
  # State Changed:
  # ???
  
  def insert
    DATABASE.execute("INSERT INTO products (serial_number, name, description, 
                      quantity, cost, location_id, category_id) 
                      VALUES (#{@serial_number}, '#{@name}', '#{@description}', 
                      #{@quantity}, #{@cost}, #{@location_id}, #{@category_id})")
    # At present, 0's are entered in for integer values that are not entered, need to change this to our default settings. Blank field left for empty text values.
    @id = DATABASE.last_insert_row_id
  end
  
end

